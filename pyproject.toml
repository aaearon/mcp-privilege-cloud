[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "mcp-privilege-cloud"
version = "0.1.0"
description = "A Model Context Protocol (MCP) server for CyberArk Privilege Cloud integration"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Tim Schindler", email = "tim@iosharp.com"}
]
maintainers = [
    {name = "Tim Schindler", email = "tim@iosharp.com"}
]
keywords = ["cyberark", "mcp", "privilege-cloud", "privileged-access-management", "pam"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Security",
    "Topic :: System :: Systems Administration :: Authentication/Directory",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.10"
dependencies = [
    "mcp[cli]>=1.0.0",
    "httpx>=0.27.0",
    "python-dotenv>=1.0.0",
    "pydantic>=2.5.0",
    "pydantic-settings>=2.1.0",
    "ark-sdk-python>=1.0.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.0.0",
    "ruff>=0.1.0",
    "mypy>=1.0.0",
]
test = [
    "pytest>=8.0.0",
    "pytest-asyncio>=0.23.0",
    "pytest-mock>=3.12.0",
    "pytest-cov>=4.0.0",
]

[project.urls]
"Homepage" = "https://github.com/aaearon/mcp-privilege-cloud"
"Bug Reports" = "https://github.com/aaearon/mcp-privilege-cloud/issues"
"Source" = "https://github.com/aaearon/mcp-privilege-cloud"
"Documentation" = "https://github.com/aaearon/mcp-privilege-cloud#readme"

[project.scripts]
mcp-privilege-cloud = "mcp_privilege_cloud:main"

[tool.hatch.build.targets.wheel]
packages = ["src/mcp_privilege_cloud"]

[tool.hatch.build.targets.sdist]
include = [
    "/src",
    "/tests",
    "/README.md",
    "/LICENSE",
]

# Pytest configuration
[tool.pytest.ini_options]
minversion = "8.0"
addopts = [
    "--strict-markers",
    "--strict-config",
    "--tb=short",
    "-ra",
    "--cov=src/mcp_privilege_cloud",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "integration: marks tests as integration tests (deselect with '-m \"not integration\"')",
    "unit: marks tests as unit tests",
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
]

# Coverage configuration
[tool.coverage.run]
source = ["src/mcp_privilege_cloud"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "N",  # pep8-naming
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "B904",  # raise from None
]

[tool.ruff.per-file-ignores]
"tests/*" = ["E501"]

[tool.ruff.isort]
known-first-party = ["mcp_privilege_cloud"]

# MyPy configuration
[tool.mypy]
python_version = "3.10"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_return_any = true
strict_optional = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "mcp.*",
    "httpx.*",
    "pytest.*",
]
ignore_missing_imports = true